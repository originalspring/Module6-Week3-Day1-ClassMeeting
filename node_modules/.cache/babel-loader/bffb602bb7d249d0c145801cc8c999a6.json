{"ast":null,"code":"// Adapted from:\n//https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright © 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function boxGeometry() {\n  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var wCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var hCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var dCount = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  wCount = Math.floor(wCount);\n  hCount = Math.floor(hCount);\n  dCount = Math.floor(dCount);\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  var numberOfVertices = 0;\n  buildPlane(2, 1, 0, -1, -1, depth, height, +width, dCount, hCount);\n  buildPlane(2, 1, 0, +1, -1, depth, height, -width, dCount, hCount);\n  buildPlane(0, 2, 1, +1, +1, width, depth, +height, wCount, dCount);\n  buildPlane(0, 2, 1, +1, -1, width, depth, -height, wCount, dCount);\n  buildPlane(0, 1, 2, +1, -1, width, height, +depth, wCount, hCount);\n  buildPlane(0, 1, 2, -1, -1, width, height, -depth, wCount, hCount);\n  function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY) {\n    var segmentWidth = width / gridX;\n    var segmentHeight = height / gridY;\n    var widthHalf = width / 2;\n    var heightHalf = height / 2;\n    var depthHalf = depth / 2;\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n    var vertexCounter = 0;\n    var ix, iy;\n    var vector = new Array(3);\n    for (iy = 0; iy < gridY1; iy++) {\n      var y = iy * segmentHeight - heightHalf;\n      for (ix = 0; ix < gridX1; ix++) {\n        var x = ix * segmentWidth - widthHalf;\n        vector[u] = x * udir;\n        vector[v] = y * vdir;\n        vector[w] = depthHalf;\n        vertices.push.apply(vertices, vector);\n        vector[u] = 0;\n        vector[v] = 0;\n        vector[w] = depth > 0 ? 1 : -1;\n        normals.push.apply(normals, vector);\n        uvs.push(ix / gridX);\n        uvs.push(1 - iy / gridY);\n        vertexCounter += 1;\n      }\n    }\n    for (iy = 0; iy < gridY; iy++) {\n      for (ix = 0; ix < gridX; ix++) {\n        var a = numberOfVertices + ix + gridX1 * iy;\n        var b = numberOfVertices + ix + gridX1 * (iy + 1);\n        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n        var d = numberOfVertices + (ix + 1) + gridX1 * iy;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    numberOfVertices += vertexCounter;\n  }\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":{"version":3,"mappings":"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","names":["boxGeometry","width","height","depth","wCount","hCount","dCount","Math","floor","indices","vertices","normals","uvs","numberOfVertices","buildPlane","u","v","w","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","ix","iy","vector","Array","y","x","push","a","b","c","d"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/geometry-hooks/src/boxGeometry.ts"],"sourcesContent":["// Adapted from:\n//https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright © 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default function boxGeometry(\n  width = 1,\n  height = 1,\n  depth = 1,\n  wCount: number = 1,\n  hCount: number = 1,\n  dCount: number = 1,\n) {\n  wCount = Math.floor(wCount)\n  hCount = Math.floor(hCount)\n  dCount = Math.floor(dCount)\n\n  const indices: number[] = []\n  const vertices: number[] = []\n  const normals: number[] = []\n  const uvs: number[] = []\n\n  let numberOfVertices = 0\n\n  buildPlane(2, 1, 0, -1, -1, depth, height, +width, dCount, hCount)\n  buildPlane(2, 1, 0, +1, -1, depth, height, -width, dCount, hCount)\n  buildPlane(0, 2, 1, +1, +1, width, depth, +height, wCount, dCount)\n  buildPlane(0, 2, 1, +1, -1, width, depth, -height, wCount, dCount)\n  buildPlane(0, 1, 2, +1, -1, width, height, +depth, wCount, hCount)\n  buildPlane(0, 1, 2, -1, -1, width, height, -depth, wCount, hCount)\n\n  function buildPlane(\n    u: number,\n    v: number,\n    w: number,\n    udir: number,\n    vdir: number,\n    width: number,\n    height: number,\n    depth: number,\n    gridX: number,\n    gridY: number,\n  ) {\n    const segmentWidth = width / gridX\n    const segmentHeight = height / gridY\n\n    const widthHalf = width / 2\n    const heightHalf = height / 2\n    const depthHalf = depth / 2\n\n    const gridX1 = gridX + 1\n    const gridY1 = gridY + 1\n\n    let vertexCounter = 0\n\n    let ix, iy\n\n    const vector = new Array(3)\n\n    for (iy = 0; iy < gridY1; iy++) {\n      var y = iy * segmentHeight - heightHalf\n\n      for (ix = 0; ix < gridX1; ix++) {\n        var x = ix * segmentWidth - widthHalf\n\n        vector[u] = x * udir\n        vector[v] = y * vdir\n        vector[w] = depthHalf\n\n        vertices.push(...vector)\n\n        vector[u] = 0\n        vector[v] = 0\n        vector[w] = depth > 0 ? 1 : -1\n\n        normals.push(...vector)\n\n        uvs.push(ix / gridX)\n        uvs.push(1 - iy / gridY)\n\n        vertexCounter += 1\n      }\n    }\n\n    for (iy = 0; iy < gridY; iy++) {\n      for (ix = 0; ix < gridX; ix++) {\n        var a = numberOfVertices + ix + gridX1 * iy\n        var b = numberOfVertices + ix + gridX1 * (iy + 1)\n        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1)\n        var d = numberOfVertices + (ix + 1) + gridX1 * iy\n\n        indices.push(a, b, d)\n        indices.push(b, c, d)\n      }\n    }\n\n    numberOfVertices += vertexCounter\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"]},"metadata":{},"sourceType":"module"}