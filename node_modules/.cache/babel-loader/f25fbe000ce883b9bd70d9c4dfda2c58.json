{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useSceneNode, useWebGLContext } from '..';\nfunction applyTextureOptions(gl, texture, data, opts) {\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  var type = opts.type || gl.UNSIGNED_BYTE;\n  var format = opts.format || gl.RGBA;\n  var internalFormat = opts.internalFormat || opts.format || gl.RGBA;\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, format, type, data);\n  var wrapS = opts.wrap || opts.wrapS || gl.REPEAT;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n  var wrapT = opts.wrap || opts.wrapT || gl.REPEAT;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n  var minFilter = opts.minMag || opts.minFilter || gl.NEAREST_MIPMAP_LINEAR;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n  var magFilter = opts.minMag || opts.magFilter || gl.LINEAR;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n  if (opts.mipmaps !== false) {\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n}\nvar defaultPlaceholder = new Uint8Array([0, 0, 0, 1]);\nexport function useTexture2d(url, getOptions) {\n  _s();\n  var gl = useWebGLContext();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var memoized = useMemo(function () {\n    var texture = gl.createTexture();\n    var options = getOptions ? getOptions(gl) : {};\n    var placeholder = options.placeholder || defaultPlaceholder;\n    gl.bindTexture(gl.TEXTURE_2D, texture); // prettier-ignore\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, placeholder);\n    return texture;\n  }, [gl]);\n  useEffect(function () {\n    var options = getOptions ? getOptions(gl) : {};\n    if (data && memoized) {\n      applyTextureOptions(gl, memoized, data, options);\n    }\n  }, [gl, memoized, data]);\n  useEffect(function () {\n    var _ref = getOptions ? getOptions(gl) : {},\n      _ref$crossOrigin = _ref.crossOrigin,\n      crossOrigin = _ref$crossOrigin === void 0 ? null : _ref$crossOrigin;\n    var img = new Image();\n    img.crossOrigin = crossOrigin || '';\n    img.src = url;\n    img.addEventListener('load', function () {\n      return setData(img);\n    });\n  }, [url]);\n  return [memoized, !!data];\n}\n_s(useTexture2d, \"Mg6drhIT33KsuAqBNCFbJISzNig=\", false, function () {\n  return [useWebGLContext];\n});\nexport function useDataTexture(gl, data, width, height, getOptions) {\n  _s2();\n  var memoized = useMemo(function () {\n    var texture = gl.createTexture();\n    var options = getOptions ? getOptions(gl) : {};\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    var type = options.type || gl.FLOAT;\n    var format = options.format || gl.RGBA;\n    var internalFormat = options.internalFormat || options.format || gl.RGBA; // prettier-ignore\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, data);\n    var minFilter = options.minMag || options.minFilter || gl.NEAREST;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    var magFilter = options.minMag || options.magFilter || gl.NEAREST;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n    var wrapS = options.wrap || options.wrapS || gl.CLAMP_TO_EDGE;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    var wrapT = options.wrap || options.wrapT || gl.CLAMP_TO_EDGE;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n    return texture;\n  }, [gl, data, width, height]);\n  return memoized;\n}\n_s2(useDataTexture, \"KMI6DIONdD7isGYT+tL7kc0anjg=\");\nexport function useTextureUnit() {\n  _s3();\n  var scene = useSceneNode();\n  var memoized = useMemo(function () {\n    return scene.getTextureUnit();\n  }, [scene]);\n  useEffect(function () {\n    return function () {\n      return scene.releaseTextureUnit(memoized);\n    };\n  }, [scene, memoized]);\n  return memoized;\n}\n_s3(useTextureUnit, \"laB8WU4Eq1oVH+qI/ZxX983Ir6E=\", false, function () {\n  return [useSceneNode];\n});","map":{"version":3,"mappings":"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","names":["useEffect","useMemo","useState","useSceneNode","useWebGLContext","applyTextureOptions","gl","texture","data","opts","bindTexture","TEXTURE_2D","type","UNSIGNED_BYTE","format","RGBA","internalFormat","texImage2D","wrapS","wrap","REPEAT","texParameteri","TEXTURE_WRAP_S","wrapT","TEXTURE_WRAP_T","minFilter","minMag","NEAREST_MIPMAP_LINEAR","TEXTURE_MIN_FILTER","magFilter","LINEAR","TEXTURE_MAG_FILTER","mipmaps","generateMipmap","defaultPlaceholder","Uint8Array","useTexture2d","url","getOptions","_useState2","setData","memoized","createTexture","options","placeholder","_ref$crossOrigin","crossOrigin","img","Image","src","addEventListener","useDataTexture","width","height","FLOAT","NEAREST","CLAMP_TO_EDGE","useTextureUnit","scene","getTextureUnit","releaseTextureUnit"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/core/src/hooks/textures.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { useSceneNode, useWebGLContext } from '..'\n\nimport { GLContext, TextureOptions, GetTextureOptions } from '../types'\n\nfunction applyTextureOptions(\n  gl: GLContext,\n  texture: WebGLTexture,\n  data: TexImageSource,\n  opts: TextureOptions,\n) {\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n\n  const type = opts.type || gl.UNSIGNED_BYTE\n  const format = opts.format || gl.RGBA\n  const internalFormat = opts.internalFormat || opts.format || gl.RGBA\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, format, type, data)\n\n  const wrapS = opts.wrap || opts.wrapS || gl.REPEAT\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS)\n\n  const wrapT = opts.wrap || opts.wrapT || gl.REPEAT\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT)\n\n  const minFilter = opts.minMag || opts.minFilter || gl.NEAREST_MIPMAP_LINEAR\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\n  const magFilter = opts.minMag || opts.magFilter || gl.LINEAR\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\n  if (opts.mipmaps !== false) {\n    gl.generateMipmap(gl.TEXTURE_2D)\n  }\n}\n\nconst defaultPlaceholder = new Uint8Array([0, 0, 0, 1])\n\nexport function useTexture2d(url: string, getOptions?: GetTextureOptions) {\n  const gl = useWebGLContext()\n\n  const [data, setData] = useState<TexImageSource | null>(null)\n\n  const memoized = useMemo(() => {\n    const texture = gl.createTexture()\n    const options = getOptions ? getOptions(gl) : {}\n\n    const placeholder = options.placeholder || defaultPlaceholder\n\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    // prettier-ignore\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, placeholder)\n\n    return texture\n  }, [gl])\n\n  useEffect(() => {\n    const options = getOptions ? getOptions(gl) : {}\n\n    if (data && memoized) {\n      applyTextureOptions(gl, memoized, data, options)\n    }\n  }, [gl, memoized, data])\n\n  useEffect(() => {\n    const { crossOrigin = null } = getOptions ? getOptions(gl) : {}\n\n    const img = new Image()\n    img.crossOrigin = crossOrigin || ''\n    img.src = url\n    img.addEventListener('load', () => setData(img))\n  }, [url])\n\n  return [memoized, !!data]\n}\n\nexport function useDataTexture(\n  gl: GLContext,\n  data: ArrayBufferView | null,\n  width: number,\n  height: number,\n  getOptions: GetTextureOptions,\n) {\n  const memoized = useMemo(() => {\n    const texture = gl.createTexture()\n    const options = getOptions ? getOptions(gl) : {}\n\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    const type = options.type || gl.FLOAT\n    const format = options.format || gl.RGBA\n    const internalFormat = options.internalFormat || options.format || gl.RGBA\n\n    // prettier-ignore\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, data)\n\n    const minFilter = options.minMag || options.minFilter || gl.NEAREST\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\n    const magFilter = options.minMag || options.magFilter || gl.NEAREST\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\n    const wrapS = options.wrap || options.wrapS || gl.CLAMP_TO_EDGE\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS)\n\n    const wrapT = options.wrap || options.wrapT || gl.CLAMP_TO_EDGE\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT)\n\n    return texture\n  }, [gl, data, width, height])\n\n  return memoized\n}\n\nexport function useTextureUnit() {\n  const scene = useSceneNode()\n\n  const memoized = useMemo(() => {\n    return scene.getTextureUnit()\n  }, [scene])\n\n  useEffect(() => {\n    return () => scene.releaseTextureUnit(memoized)\n  }, [scene, memoized])\n\n  return memoized\n}\n"]},"metadata":{},"sourceType":"module"}