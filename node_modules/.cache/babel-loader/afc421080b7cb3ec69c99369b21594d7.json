{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useMemo, useEffect } from 'react';\nimport warn from 'warning';\nvar prefix = 'react-vertex:';\nfunction log(source) {\n  if (typeof source !== 'string') {\n    warn(false, \"\".concat(prefix, \" Shader source should be a string!\"));\n    return '';\n  }\n  var lines = source.split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n  return lines.join('\\n');\n}\nfunction useShader(gl, source) {\n  _s();\n  var isVertShader = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var memoized = useMemo(function () {\n    var _gl$getShaderPrecisio, _gl$getShaderPrecisio2;\n    if (source.constructor === WebGLShader) {\n      return source;\n    }\n    var shaderType = isVertShader ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER;\n    var shader = gl.createShader(shaderType);\n    var precision = 'lowp'; // prettier-ignore\n\n    if ((_gl$getShaderPrecisio = gl.getShaderPrecisionFormat(shaderType, gl.HIGH_FLOAT)) !== null && _gl$getShaderPrecisio !== void 0 && _gl$getShaderPrecisio.precision || 0 > 0) {\n      precision = 'highp';\n    } else if ((_gl$getShaderPrecisio2 = gl.getShaderPrecisionFormat(shaderType, gl.MEDIUM_FLOAT)) !== null && _gl$getShaderPrecisio2 !== void 0 && _gl$getShaderPrecisio2.precision || 0 > 0) {\n      precision = 'mediump';\n    }\n    var prepped = source.replace('<<FLOAT_PRECISION>>', precision);\n    if (shader) {\n      gl.shaderSource(shader, prepped);\n      gl.compileShader(shader);\n      warn(gl.getShaderParameter(shader, gl.COMPILE_STATUS), \"\".concat(prefix, \"\\n\").concat(gl.getShaderInfoLog(shader), \"\\n\").concat(log(prepped)));\n    } else {\n      warn(false, \"\".concat(prefix, \"\\nShader could not be compiled. Source:\\n\").concat(source));\n    }\n    return shader;\n  }, [gl, source, isVertShader]);\n  return memoized;\n}\n_s(useShader, \"KMI6DIONdD7isGYT+tL7kc0anjg=\");\nexport function useProgram(gl, vertSource, fragSource) {\n  _s2();\n  var vert = useShader(gl, vertSource, true);\n  var frag = useShader(gl, fragSource, false);\n  var memoized = useMemo(function () {\n    var program = gl.createProgram();\n    if (program && vert && frag) {\n      gl.attachShader(program, vert);\n      gl.attachShader(program, frag);\n      gl.linkProgram(program);\n      warn(gl.getProgramParameter(program, gl.LINK_STATUS), \"\".concat(prefix, \" Error creating program\"));\n    } else {\n      throw Error('Program could not be created.');\n    }\n    return program;\n  }, [gl, vert, frag]);\n  useEffect(function () {\n    return function () {\n      return gl.deleteProgram(memoized);\n    };\n  }, [gl, memoized]);\n  gl.useProgram(memoized);\n  return memoized;\n}\n_s2(useProgram, \"Lns+iYlV1MSiz0vm3Ew3q3+hHNE=\", true, function () {\n  return [useShader, useShader];\n});\nexport function useProgramUniforms(gl, program) {\n  _s3();\n  var memoized = useMemo(function () {\n    var uniforms = {};\n    var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (var i = 0; i < uniformCount; i++) {\n      var _gl$getActiveUniform;\n      var _name = (_gl$getActiveUniform = gl.getActiveUniform(program, i)) === null || _gl$getActiveUniform === void 0 ? void 0 : _gl$getActiveUniform.name;\n      if (_name) {\n        uniforms[_name] = gl.getUniformLocation(program, _name);\n      }\n    }\n    return uniforms;\n  }, [gl, program]);\n  return memoized;\n}\n_s3(useProgramUniforms, \"KMI6DIONdD7isGYT+tL7kc0anjg=\");","map":{"version":3,"mappings":"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","names":["useMemo","useEffect","warn","prefix","log","source","lines","split","i","length","join","useShader","gl","isVertShader","memoized","constructor","WebGLShader","shaderType","VERTEX_SHADER","FRAGMENT_SHADER","shader","createShader","precision","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","prepped","replace","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","useProgram","vertSource","fragSource","vert","frag","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","Error","deleteProgram","useProgramUniforms","uniforms","uniformCount","ACTIVE_UNIFORMS","name","getActiveUniform","_gl$getActiveUniform","getUniformLocation"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/core/src/hooks/shaders.ts"],"sourcesContent":["import { useMemo, useEffect } from 'react'\nimport warn from 'warning'\n\nimport { GLContext } from '../types'\n\nconst prefix = 'react-vertex:'\n\nfunction log(source: string) {\n  if (typeof source !== 'string') {\n    warn(false, `${prefix} Shader source should be a string!`)\n    return ''\n  }\n\n  const lines = source.split('\\n')\n\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i]\n  }\n\n  return lines.join('\\n')\n}\n\nfunction useShader(gl: GLContext, source: string, isVertShader = false) {\n  const memoized = useMemo(() => {\n    if (source.constructor === WebGLShader) {\n      return source\n    }\n\n    const shaderType = isVertShader ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER\n    const shader = gl.createShader(shaderType)\n\n    let precision = 'lowp'\n\n    // prettier-ignore\n    if (gl.getShaderPrecisionFormat(shaderType, gl.HIGH_FLOAT)?.precision || 0 > 0) {\n      precision = 'highp'\n    } else if (gl.getShaderPrecisionFormat(shaderType, gl.MEDIUM_FLOAT)?.precision || 0 > 0) {\n      precision = 'mediump'\n    }\n\n    const prepped = source.replace('<<FLOAT_PRECISION>>', precision)\n\n    if (shader) {\n      gl.shaderSource(shader, prepped)\n      gl.compileShader(shader)\n\n      warn(\n        gl.getShaderParameter(shader, gl.COMPILE_STATUS),\n        `${prefix}\\n${gl.getShaderInfoLog(shader)}\\n${log(prepped)}`,\n      )\n    } else {\n      warn(false, `${prefix}\\nShader could not be compiled. Source:\\n${source}`)\n    }\n\n    return shader\n  }, [gl, source, isVertShader])\n\n  return memoized\n}\n\nexport function useProgram(\n  gl: GLContext,\n  vertSource: string,\n  fragSource: string,\n) {\n  const vert = useShader(gl, vertSource, true)\n  const frag = useShader(gl, fragSource, false)\n\n  const memoized = useMemo(() => {\n    const program = gl.createProgram()\n\n    if (program && vert && frag) {\n      gl.attachShader(program, vert)\n      gl.attachShader(program, frag)\n      gl.linkProgram(program)\n\n      warn(\n        gl.getProgramParameter(program, gl.LINK_STATUS),\n        `${prefix} Error creating program`,\n      )\n    } else {\n      throw Error('Program could not be created.')\n    }\n\n    return program\n  }, [gl, vert, frag])\n\n  useEffect(() => {\n    return () => gl.deleteProgram(memoized)\n  }, [gl, memoized])\n\n  gl.useProgram(memoized)\n\n  return memoized\n}\n\nexport function useProgramUniforms(gl: GLContext, program: WebGLProgram) {\n  const memoized = useMemo(() => {\n    const uniforms: { [name: string]: WebGLUniformLocation | null } = {}\n\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\n\n    for (let i = 0; i < uniformCount; i++) {\n      const name = gl.getActiveUniform(program, i)?.name\n\n      if (name) {\n        uniforms[name] = gl.getUniformLocation(program, name)\n      }\n    }\n\n    return uniforms\n  }, [gl, program])\n\n  return memoized\n}\n"]},"metadata":{},"sourceType":"module"}