{"ast":null,"code":"// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright © 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function PlaneBufferGeometry() {\n  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var width_half = width / 2;\n  var height_half = height / 2;\n  var gridX = Math.floor(widthSegments);\n  var gridY = Math.floor(heightSegments);\n  var gridX1 = gridX + 1;\n  var gridY1 = gridY + 1;\n  var segment_width = width / gridX;\n  var segment_height = height / gridY;\n  var ix, iy;\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  for (iy = 0; iy < gridY1; iy++) {\n    var y = iy * segment_height - height_half;\n    for (ix = 0; ix < gridX1; ix++) {\n      var x = ix * segment_width - width_half;\n      vertices.push(x, -y, 0);\n      normals.push(0, 0, 1);\n      uvs.push(ix / gridX);\n      uvs.push(1 - iy / gridY);\n    }\n  }\n  for (iy = 0; iy < gridY; iy++) {\n    for (ix = 0; ix < gridX; ix++) {\n      var a = ix + gridX1 * iy;\n      var b = ix + gridX1 * (iy + 1);\n      var c = ix + 1 + gridX1 * (iy + 1);\n      var d = ix + 1 + gridX1 * iy;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}\n_c = PlaneBufferGeometry;\nvar _c;\n$RefreshReg$(_c, \"PlaneBufferGeometry\");","map":{"version":3,"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,SAASA,mBAAT,GAKb;EAAA,IAJAC,KAIA,uEAJgB,CAIhB;EAAA,IAHAC,MAGA,uEAHiB,CAGjB;EAAA,IAFAC,aAEA,uEAFwB,CAExB;EAAA,IADAC,cACA,uEADyB,CACzB;EACA,IAAMC,UAAU,GAAGJ,KAAK,GAAG,CAA3B;EACA,IAAMK,WAAW,GAAGJ,MAAM,GAAG,CAA7B;EAEA,IAAMK,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,aAAX,CAAd;EACA,IAAMO,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAWL,cAAX,CAAd;EAEA,IAAMO,MAAM,GAAGJ,KAAK,GAAG,CAAvB;EACA,IAAMK,MAAM,GAAGF,KAAK,GAAG,CAAvB;EAEA,IAAMG,aAAa,GAAGZ,KAAK,GAAGM,KAA9B;EACA,IAAMO,cAAc,GAAGZ,MAAM,GAAGQ,KAAhC;EAEA,IAAIK,EAAJ,EAAQC,EAAR;EAEA,IAAMC,OAAO,GAAG,EAAhB;EACA,IAAMC,QAAQ,GAAG,EAAjB;EACA,IAAMC,OAAO,GAAG,EAAhB;EACA,IAAMC,GAAG,GAAG,EAAZ;EAEA,KAAKJ,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGJ,MAAlB,EAA0BI,EAAE,EAA5B,EAAgC;IAC9B,IAAMK,CAAC,GAAGL,EAAE,GAAGF,cAAL,GAAsBR,WAAhC;IAEA,KAAKS,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGJ,MAAlB,EAA0BI,EAAE,EAA5B,EAAgC;MAC9B,IAAMO,CAAC,GAAGP,EAAE,GAAGF,aAAL,GAAqBR,UAA/B;MAEAa,QAAQ,CAACK,IAAT,CAAcD,CAAd,EAAiB,CAACD,CAAlB,EAAqB,CAArB;MACAF,OAAO,CAACI,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;MAEAH,GAAG,CAACG,IAAJ,CAASR,EAAE,GAAGR,KAAd;MACAa,GAAG,CAACG,IAAJ,CAAS,IAAIP,EAAE,GAAGN,KAAlB;IACD;EACF;EAED,KAAKM,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGN,KAAlB,EAAyBM,EAAE,EAA3B,EAA+B;IAC7B,KAAKD,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGR,KAAlB,EAAyBQ,EAAE,EAA3B,EAA+B;MAC7B,IAAMS,CAAC,GAAGT,EAAE,GAAGJ,MAAM,GAAGK,EAAxB;MACA,IAAMS,CAAC,GAAGV,EAAE,GAAGJ,MAAM,IAAIK,EAAE,GAAG,CAAT,CAArB;MACA,IAAMU,CAAC,GAAGX,EAAE,GAAG,CAAL,GAASJ,MAAM,IAAIK,EAAE,GAAG,CAAT,CAAzB;MACA,IAAMW,CAAC,GAAGZ,EAAE,GAAG,CAAL,GAASJ,MAAM,GAAGK,EAA5B;MAEAC,OAAO,CAACM,IAAR,CAAaC,CAAb,EAAgBC,CAAhB,EAAmBE,CAAnB;MACAV,OAAO,CAACM,IAAR,CAAaE,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB;IACD;EACF;EAED,OAAO;IAAEV,OAAO,EAAPA,OAAF;IAAWC,QAAQ,EAARA,QAAX;IAAqBC,OAAO,EAAPA,OAArB;IAA8BC,GAAG,EAAHA;EAA9B,CAAP;AACD;AAAA,KApDuBpB,mBAAT;AAAA;AAAA","names":["PlaneBufferGeometry","width","height","widthSegments","heightSegments","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","ix","iy","indices","vertices","normals","uvs","y","x","push","a","b","c","d"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/geometry-hooks/src/planeGeometry.ts"],"sourcesContent":["// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright © 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default function PlaneBufferGeometry(\n  width: number = 1,\n  height: number = 1,\n  widthSegments: number = 1,\n  heightSegments: number = 1,\n) {\n  const width_half = width / 2\n  const height_half = height / 2\n\n  const gridX = Math.floor(widthSegments)\n  const gridY = Math.floor(heightSegments)\n\n  const gridX1 = gridX + 1\n  const gridY1 = gridY + 1\n\n  const segment_width = width / gridX\n  const segment_height = height / gridY\n\n  let ix, iy\n\n  const indices = []\n  const vertices = []\n  const normals = []\n  const uvs = []\n\n  for (iy = 0; iy < gridY1; iy++) {\n    const y = iy * segment_height - height_half\n\n    for (ix = 0; ix < gridX1; ix++) {\n      const x = ix * segment_width - width_half\n\n      vertices.push(x, -y, 0)\n      normals.push(0, 0, 1)\n\n      uvs.push(ix / gridX)\n      uvs.push(1 - iy / gridY)\n    }\n  }\n\n  for (iy = 0; iy < gridY; iy++) {\n    for (ix = 0; ix < gridX; ix++) {\n      const a = ix + gridX1 * iy\n      const b = ix + gridX1 * (iy + 1)\n      const c = ix + 1 + gridX1 * (iy + 1)\n      const d = ix + 1 + gridX1 * iy\n\n      indices.push(a, b, d)\n      indices.push(b, c, d)\n    }\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"]},"metadata":{},"sourceType":"module"}