{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useContext, useMemo, useEffect } from 'react';\nimport ReactVertexContext from '../Context';\nimport { ctxErr, useUniform3fv } from '..';\nvar white = [1, 1, 1];\nvar origin = [0, 0, 0];\nexport function usePointLight() {\n  _s();\n  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : white;\n  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : origin;\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"usePointLight \".concat(ctxErr));\n  }\n  var pointLights = useMemo(function () {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.');\n    }\n    return context.scene.pointLights;\n  }, [context]);\n  var light = useMemo(function () {\n    return pointLights.add();\n  }, [pointLights]);\n  useEffect(function () {\n    pointLights.updateDiffuse(light, color);\n  }, [pointLights, light, color]);\n  useEffect(function () {\n    pointLights.updatePosition(light, position);\n  }, [pointLights, light, position]);\n  useEffect(function () {\n    return function () {\n      return pointLights.remove(light);\n    };\n  }, [pointLights, light]);\n}\n_s(usePointLight, \"9sh+DWbTSm35mqRiBoTwI01Lb10=\");\nexport function usePointLightUniforms(gl, program) {\n  _s2();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"usePointLightUniforms \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  useUniform3fv(gl, program, 'pointLd', context.scene.pointLights.diffuse);\n  useUniform3fv(gl, program, 'pointLp', context.scene.pointLights.position);\n}\n_s2(usePointLightUniforms, \"nOXDjHIp7X8l3xrW9pMy+IuCMwM=\", false, function () {\n  return [useUniform3fv, useUniform3fv];\n});\nexport function usePointLightCount(vertSource, fragSource) {\n  _s3();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"usePointLightCount \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  var memoizedVert = useMemo(function () {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.');\n    }\n    var count = context.scene.pointLights.instances.length;\n    return vertSource.replace('<<NUM_POINT_LIGHTS>>', \"\".concat(count));\n  }, [vertSource, context.scene.pointLights.instances.length]);\n  var memoizedFrag = useMemo(function () {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.');\n    }\n    var count = context.scene.pointLights.instances.length;\n    return fragSource.replace('<<NUM_POINT_LIGHTS>>', \"\".concat(count));\n  }, [fragSource, context.scene.pointLights.instances.length]);\n  return [memoizedVert, memoizedFrag];\n}\n_s3(usePointLightCount, \"dqEkY0hlCNat83wAplA70xexH5Q=\");","map":{"version":3,"mappings":"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","names":["useContext","useMemo","useEffect","ReactVertexContext","ctxErr","useUniform3fv","white","origin","usePointLight","color","position","context","Error","pointLights","scene","light","add","updateDiffuse","updatePosition","remove","usePointLightUniforms","gl","program","diffuse","usePointLightCount","vertSource","fragSource","memoizedVert","count","instances","length","replace","memoizedFrag"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/core/src/hooks/lights.ts"],"sourcesContent":["import { useContext, useMemo, useEffect } from 'react'\nimport ReactVertexContext from '../Context'\nimport { ctxErr, useUniform3fv } from '..'\n\nimport { GLContext } from '../types'\n\nconst white = [1, 1, 1]\nconst origin = [0, 0, 0]\n\nexport function usePointLight(color = white, position = origin) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLight ${ctxErr}`)\n  }\n\n  const pointLights = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    return context.scene.pointLights\n  }, [context])\n\n  const light = useMemo(() => {\n    return pointLights.add()\n  }, [pointLights])\n\n  useEffect(() => {\n    pointLights.updateDiffuse(light, color)\n  }, [pointLights, light, color])\n\n  useEffect(() => {\n    pointLights.updatePosition(light, position)\n  }, [pointLights, light, position])\n\n  useEffect(() => {\n    return () => pointLights.remove(light)\n  }, [pointLights, light])\n}\n\nexport function usePointLightUniforms(gl: GLContext, program: WebGLProgram) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLightUniforms ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  useUniform3fv(gl, program, 'pointLd', context.scene.pointLights.diffuse)\n  useUniform3fv(gl, program, 'pointLp', context.scene.pointLights.position)\n}\n\nexport function usePointLightCount(vertSource: string, fragSource: string) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLightCount ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  const memoizedVert = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    const count = context.scene.pointLights.instances.length\n    return vertSource.replace('<<NUM_POINT_LIGHTS>>', `${count}`)\n  }, [vertSource, context.scene.pointLights.instances.length])\n\n  const memoizedFrag = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    const count = context.scene.pointLights.instances.length\n    return fragSource.replace('<<NUM_POINT_LIGHTS>>', `${count}`)\n  }, [fragSource, context.scene.pointLights.instances.length])\n\n  return [memoizedVert, memoizedFrag]\n}\n"]},"metadata":{},"sourceType":"module"}