{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { mat4 } from 'gl-matrix';\nimport { SceneNode } from './SceneNode';\nexport var isGraphNode = Symbol('isGraphNode');\nvar GraphNode = /*#__PURE__*/function () {\n  function GraphNode() {\n    _classCallCheck(this, GraphNode);\n    this.parent = void 0;\n    this.children = void 0;\n    this.matrix = void 0;\n    this.worldMatrix = void 0;\n    this.needsMatrixUpdate = void 0;\n    this.userManagedMatrix = void 0;\n    this.position = void 0;\n    this.rotation = void 0;\n    this.scale = void 0;\n    this.root = void 0;\n    this[isGraphNode] = true;\n    this.children = [];\n    this.matrix = mat4.create();\n    this.worldMatrix = mat4.create();\n    this.needsMatrixUpdate = false;\n    this.userManagedMatrix = false;\n  }\n  _createClass(GraphNode, [{\n    key: \"add\",\n    value: function add(child) {\n      child.parent = this;\n      child.updateWorldMatrix();\n      this.children.push(child);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(child) {\n      var index = this.children.findIndex(function (d) {\n        return d === child;\n      });\n      if (index >= 0) {\n        delete this.children[index].parent;\n        this.children.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"updateWorldMatrix\",\n    value: function updateWorldMatrix() {\n      if (this instanceof SceneNode) {\n        mat4.copy(this.worldMatrix, this.matrix);\n      } else if (this.parent) {\n        mat4.multiply(this.worldMatrix, this.parent.worldMatrix, this.matrix);\n      }\n    }\n  }, {\n    key: \"updateMatrix\",\n    value: function updateMatrix() {\n      if (this.userManagedMatrix) {\n        return;\n      }\n      mat4.identity(this.matrix);\n      if (this.position) {\n        mat4.translate(this.matrix, this.matrix, this.position);\n      }\n      if (this.rotation) {\n        var _this$rotation = _slicedToArray(this.rotation, 3),\n          x = _this$rotation[0],\n          y = _this$rotation[1],\n          z = _this$rotation[2];\n        x && mat4.rotateX(this.matrix, this.matrix, x);\n        y && mat4.rotateY(this.matrix, this.matrix, y);\n        z && mat4.rotateZ(this.matrix, this.matrix, z);\n      }\n      if (this.scale) {\n        mat4.scale(this.matrix, this.matrix, this.scale);\n      }\n    }\n  }, {\n    key: \"applyMatrixProps\",\n    value: function applyMatrixProps(nextprops, prevProps) {\n      if (nextprops.matrix) {\n        this.matrix = nextprops.matrix;\n        this.userManagedMatrix = true;\n        this.updateWorldMatrix();\n        this.children.forEach(function (c) {\n          return c.needsMatrixUpdate = true;\n        });\n      } else if (nextprops.position !== prevProps.position || nextprops.rotation !== prevProps.rotation || nextprops.scale !== prevProps.scale) {\n        this.position = nextprops.position;\n        this.rotation = nextprops.rotation;\n        this.scale = nextprops.scale;\n        this.needsMatrixUpdate = true;\n      }\n      if (this.root && this.root.renderOnUpdate) {\n        this.root.requestRender();\n      }\n    }\n  }]);\n  return GraphNode;\n}();\nexport { GraphNode as default };","map":{"version":3,"mappings":"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","names":["mat4","SceneNode","isGraphNode","Symbol","GraphNode","_classCallCheck","parent","children","matrix","worldMatrix","needsMatrixUpdate","userManagedMatrix","position","rotation","scale","root","create","child","updateWorldMatrix","push","index","findIndex","d","splice","copy","multiply","identity","translate","x","y","z","rotateX","rotateY","rotateZ","nextprops","prevProps","forEach","c","renderOnUpdate","requestRender"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/core/src/sceneGraph/GraphNode.ts"],"sourcesContent":["import { mat4, vec3 } from 'gl-matrix'\nimport { SceneNode } from './SceneNode'\n\nimport { MatrixProps } from '../types'\n\nexport const isGraphNode = Symbol('isGraphNode')\n\nexport default class GraphNode {\n  parent?: GraphNode\n  children: GraphNode[]\n  matrix: mat4\n  worldMatrix: mat4\n  needsMatrixUpdate: boolean\n  userManagedMatrix: boolean\n\n  position?: vec3\n  rotation?: vec3\n  scale?: vec3\n\n  root?: SceneNode\n\n  constructor() {\n    this.children = []\n    this.matrix = mat4.create()\n    this.worldMatrix = mat4.create()\n    this.needsMatrixUpdate = false\n    this.userManagedMatrix = false\n  }\n\n  [isGraphNode] = true\n\n  add(child: GraphNode) {\n    child.parent = this\n    child.updateWorldMatrix()\n    this.children.push(child)\n  }\n\n  remove(child: GraphNode) {\n    const index = this.children.findIndex(d => d === child)\n\n    if (index >= 0) {\n      delete this.children[index].parent\n      this.children.splice(index, 1)\n    }\n  }\n\n  updateWorldMatrix() {\n    if (this instanceof SceneNode) {\n      mat4.copy(this.worldMatrix, this.matrix)\n    } else if (this.parent) {\n      mat4.multiply(this.worldMatrix, this.parent.worldMatrix, this.matrix)\n    }\n  }\n\n  updateMatrix() {\n    if (this.userManagedMatrix) {\n      return\n    }\n\n    mat4.identity(this.matrix)\n\n    if (this.position) {\n      mat4.translate(this.matrix, this.matrix, this.position)\n    }\n\n    if (this.rotation) {\n      const [x, y, z] = this.rotation\n      x && mat4.rotateX(this.matrix, this.matrix, x)\n      y && mat4.rotateY(this.matrix, this.matrix, y)\n      z && mat4.rotateZ(this.matrix, this.matrix, z)\n    }\n\n    if (this.scale) {\n      mat4.scale(this.matrix, this.matrix, this.scale)\n    }\n  }\n\n  applyMatrixProps(nextprops: MatrixProps, prevProps: MatrixProps) {\n    if (nextprops.matrix) {\n      this.matrix = nextprops.matrix\n      this.userManagedMatrix = true\n      this.updateWorldMatrix()\n\n      this.children.forEach(c => (c.needsMatrixUpdate = true))\n    } else if (\n      nextprops.position !== prevProps.position ||\n      nextprops.rotation !== prevProps.rotation ||\n      nextprops.scale !== prevProps.scale\n    ) {\n      this.position = nextprops.position\n      this.rotation = nextprops.rotation\n      this.scale = nextprops.scale\n\n      this.needsMatrixUpdate = true\n    }\n\n    if (this.root && this.root.renderOnUpdate) {\n      this.root.requestRender()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}