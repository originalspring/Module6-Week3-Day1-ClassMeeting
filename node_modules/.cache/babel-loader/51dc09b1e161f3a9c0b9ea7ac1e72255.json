{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport { useContext, useMemo } from 'react';\nimport ReactVertexContext from '../Context';\nexport * from './shaders';\nexport * from './buffers';\nexport * from './framebuffers';\nexport * from './lights';\nexport * from './attributes';\nexport * from './uniforms';\nexport * from './textures';\nexport var ctxErr = 'hook must be used in a React Vertex component tree.';\nexport function useRender() {\n  _s();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw Error(\"useRender \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  return context.scene.render;\n}\n_s(useRender, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function useWebGLContext() {\n  _s2();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"useWebGLContext \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  return context.scene.context;\n}\n_s2(useWebGLContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function useWebGLVersion() {\n  _s3();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"useWebGLVersion \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  return context.scene.webglVersion;\n}\n_s3(useWebGLVersion, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function useSceneNode() {\n  _s4();\n  var context = useContext(ReactVertexContext);\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  return context.scene;\n}\n_s4(useSceneNode, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function useCanvas() {\n  _s5();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"useCanvas \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  return context.scene.element;\n}\n_s5(useCanvas, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function useCanvasSize() {\n  _s6();\n  var context = useContext(ReactVertexContext);\n  if (!context) {\n    throw new Error(\"useCanvasSize \".concat(ctxErr));\n  }\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n  var memoized = useMemo(function () {\n    var _context$scene, _context$scene2;\n    return {\n      width: context.width,\n      clientWidth: ((_context$scene = context.scene) === null || _context$scene === void 0 ? void 0 : _context$scene.element.clientWidth) || context.width,\n      height: context.height,\n      clientHeight: ((_context$scene2 = context.scene) === null || _context$scene2 === void 0 ? void 0 : _context$scene2.element.clientHeight) || context.height\n    };\n  }, [context.width, context.height, context.scene.element]);\n  return memoized;\n}\n_s6(useCanvasSize, \"/yMx1XXUxmSVxxQ+bX9cG5MDdRY=\");","map":{"version":3,"mappings":"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","names":["useContext","useMemo","ReactVertexContext","ctxErr","useRender","context","Error","scene","render","useWebGLContext","useWebGLVersion","webglVersion","useSceneNode","useCanvas","element","useCanvasSize","memoized","width","clientWidth","height","clientHeight"],"sources":["/Users/meishenyin/Desktop/Westcliff/3apps/src/spheres/node_modules/@react-vertex/core/src/hooks/index.ts"],"sourcesContent":["import { useContext, useMemo } from 'react'\nimport ReactVertexContext from '../Context'\n\nexport * from './shaders'\nexport * from './buffers'\nexport * from './framebuffers'\nexport * from './lights'\nexport * from './attributes'\nexport * from './uniforms'\nexport * from './textures'\n\nexport const ctxErr = 'hook must be used in a React Vertex component tree.'\n\nexport function useRender() {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw Error(`useRender ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  return context.scene.render\n}\n\nexport function useWebGLContext() {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`useWebGLContext ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  return context.scene.context\n}\n\nexport function useWebGLVersion() {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`useWebGLVersion ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  return context.scene.webglVersion\n}\n\nexport function useSceneNode() {\n  const context = useContext(ReactVertexContext)\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  return context.scene\n}\n\nexport function useCanvas() {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`useCanvas ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  return context.scene.element\n}\n\nexport function useCanvasSize() {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`useCanvasSize ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  const memoized = useMemo(() => {\n    return {\n      width: context.width,\n      clientWidth: context.scene?.element.clientWidth || context.width,\n      height: context.height,\n      clientHeight: context.scene?.element.clientHeight || context.height,\n    }\n  }, [context.width, context.height, context.scene.element])\n\n  return memoized\n}\n"]},"metadata":{},"sourceType":"module"}